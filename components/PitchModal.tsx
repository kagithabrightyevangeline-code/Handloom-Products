
import React, { useState, useEffect } from 'react';
import { Design } from '../types';

interface PitchModalProps {
  isOpen: boolean;
  onClose: () => void;
  design: Design | null;
}

const PitchModal: React.FC<PitchModalProps> = ({ isOpen, onClose, design }) => {
  const [copyText, setCopyText] = useState('Copy Pitch to Clipboard');

  useEffect(() => {
    if (isOpen) {
      setCopyText('Copy Pitch to Clipboard');
    }
  }, [isOpen]);

  if (!isOpen || !design) return null;

  const handleCopy = () => {
    if (design.pitch) {
      navigator.clipboard.writeText(design.pitch);
      setCopyText('Copied!');
      setTimeout(() => setCopyText('Copy Pitch to Clipboard'), 2000);
    }
  };

  const formattedPitch = design.pitch?.replace(/\*\*(.*?)\*\*/g, '<strong class="text-orange-900">$1</strong>').split('\n').map((line, i) => (
    <p key={i} className="mb-2" dangerouslySetInnerHTML={{ __html: line }} />
  ));

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto flex flex-col" onClick={(e) => e.stopPropagation()}>
        <div className="p-6 border-b border-gray-200 flex justify-between items-start">
            <div>
                <h2 className="text-2xl font-bold text-orange-900">Business Pitch for "{design.name}"</h2>
                <p className="text-sm text-gray-500">Generated by AI to help you connect with buyers.</p>
            </div>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600 transition-colors text-3xl leading-none" aria-label="Close modal">&times;</button>
        </div>
        <div className="p-6 flex-grow">
            <div className="prose prose-orange max-w-none text-gray-800">
                {formattedPitch}
            </div>
        </div>
        <div className="p-4 bg-gray-50 border-t border-gray-200 flex flex-col sm:flex-row gap-2">
            <button
                onClick={handleCopy}
                className="flex-1 bg-orange-800 text-white font-bold py-2 px-4 rounded-md hover:bg-orange-900 transition-colors duration-300"
            >
                {copyText}
            </button>
            <button
                onClick={onClose}
                className="flex-1 bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-md hover:bg-gray-300 transition-colors duration-300"
            >
                Close
            </button>
        </div>
      </div>
    </div>
  );
};

export default PitchModal;
